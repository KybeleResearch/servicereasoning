#summary Status of the implementation of the annotator on 10/04/12. The aim is at re-undertaking the work done so far.

= Introduction =
The idea is that we first annotate the two versions of the service in order to have annotated versions of them to produce the contract.

 * ServiceAnnotation(S,,1,,, S,,2,,) ⇒ S,,1,,' = S,,1,, + Annotations
 * ServiceAnnotation(S,,2,,, S,,1,,) ⇒ S,,2,,' = S,,2,, + Annotations
 * ContractGeneration(S,,1,, + Annotations, S,,2,, + Annotations) ⇒ ServiceContract 

= Service Annotation =

Basically checks subtyping relationships annotating every element (X) from the source model of the transformation as follows:
  * If ∄​ (X ϵ S,,1,,, Y ϵ S,,2,,) / (X.name ≡ Y.name) ⇒ *N/A*
  * If ∃ (X ϵ S,,1,,, Y ϵ S,,2,,) / (X,,name,, ≡ Y,,name,,) ∧ (X,,isTypeOf,, ≡ Y,,isTypeOf,,) then
    * If X < Y then (if _X is subtype of Y_) ⇒ *SUB* 
    * If X > Y then (if _X is supertype of Y_)⇒ *SUPER* 
    * ELSE
      * ⇒ *NONE* (_X is not a subtype neither a supertype of Y_)
  * If ∄​ (X ϵ S,,1,,, Y ϵ S,,2,,) / (X.name ≡ Y.name) ∧ (X.isTypeOf ≡ Y.isTypeOf) ⇒ *NONE*(_there is no matching element for X)



Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages