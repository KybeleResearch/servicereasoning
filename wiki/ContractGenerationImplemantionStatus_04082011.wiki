#summary Status of the implementation of the ContractGeneration on 08/04/11. The aim is at clarifying fuzzy points.

= Introduction =
  * The ContractGeneration consumes two annotated ASDs 
  * The first one (P,,1,,') is the Provider whereas the second one (P,,1,,') acts as the Client, i.e. it represents the service that the client would like to find: its expectations.
  * It generates a contract (C) between them that will contain elemnts from both service descriptions.
  * In particular, for a given element of S,,1',, OR  S,,2',, to be inclluded in the contract generated the next consitions should be fullfilled:
    * ∀ e ∈(C,,1',,), e ∈(C) if
      * e,,subset,, ∉ {∅, `exp`}
      * e,,Typing,, ∈ {SUB, EQUIV}
    * ∀ e ∈(P,,1',,), e ∈(C) if
      * e,,subset,, ∉ {∅, `off`}
      * e,,Typing,, ∈ {SUPER, EQUIV}

<font color=red>
*TO DISCUSS*
  * Given the fact that there could be matching elements (same name and type) in P,,1',, and C,,1',,, both fullfilling the conditions. Thus, we would be copying them both to the contract. 
    * Shall we eliminate duplicates from the contract like those above?
    * If so, Which would be the criteria to select the one that stays in the contract? We find two possibilities:
      # A _light matching_ that checks just the name without considering the properties. Which would be the element to include in the Contract, the one from P,,1',, or the one from C,,1',,?
      # A _deep matching_ that checks name, type and properties. 
         # If there is complete coincidence (e ≡ e'), the one from P,,1',, is copied to the contract
         # If there is any difference between their properties, both e and e' are copied to the contract 
</font>      