-- @atlcompiler atl2006
-- @nsURI ASD=http://ASD

module GenerateContract;
create OUT : ASD from IN : ASD;

helper context ASD!NamedElement def: isCompatible() : Boolean =
	self.annotations->select(a | a.key = 'isCompatible')->first().value = 'True';

helper context ASD!NamedElement def: isUnknown() : Boolean =
	self.annotations->select(a | a.key = 'isCompatible')->first().value = 'Unknown';

helper context ASD!NamedElement def: isNonRelevant() : Boolean =
	self.annotations->select(a | a.key = 'isCompatible')->first().value = 'NonRelevant';

helper context ASD!NamedElement def: isFromProv() : Boolean =
	self.annotations->exists(a | a.key = 'sourceModel' and a.value = 'Prov');

helper context ASD!NamedElement def: isFromCons() : Boolean =
	self.annotations->exists(a | a.key = 'sourceModel' and a.value = 'Cons');

helper context ASD!NamedElement def: isUnkownByInheritance() : Boolean =
	self.annotations->exists(a | a.key = 'unknownByInheritance');

helper context ASD!NamedElement def: isToBeMapped() : Boolean =
	(self.isCompatible()) or (self.isNonRelevant() and self.isFromCons()) 
			and (not (self.isUnkownByInheritance()));
 
rule ServiceDescription2ServiceDescription {
	from
		s : ASD!ServiceDescription
	to 
		t : ASD!ServiceDescription (
			name <- t.name 
		)
}

rule Operation2Operation {
	from
		os : ASD!Operation (os.isToBeMapped())
	to
		ot : ASD!Operation (
			name <- os.name,
			service <- os.service,
			messagePattern <- os.messagePattern,
			contents <- os.contents->select(o | o.isToBeMapped())
		)
}

rule Message2Message {
	from
		m1 : ASD!Message (m1.isToBeMapped())
	to
		m : ASD!Message (
			name <- m1.name,
			operation <- m1.operation,
			role <- m1.role,
			subset <- m1.subset,
			infoType <- m1.infoType->select(o | o.isToBeMapped())
		)
}

rule InfoType2InfoType {
	from
		it1 : ASD!InfoType (it1.isToBeMapped().debug(it1.name + ' isToBeMapped'))
			-- if the InfoType is only used by a Message that won't be used
			-- it doesn't worth mapping it. If we do the it.message reference
			-- will be dangling
	to
		it : ASD!InfoType (
			name <- it1.name,
			message <- if (it1.message.debug('Msg').oclIsUndefined()) then
						   		OclUndefined
							else
								if (it1.message.isToBeMapped()) then
					   				it1.message
								else
									OclUndefined
								endif
						endif,
			infoType <- it1.infoType->select(o | o.isToBeMapped()),
			valueType <- it1.valueType,
			valueRange <- it1.valueRange,
			service <- it1.service
		)
}